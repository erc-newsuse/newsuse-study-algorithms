---
title: "Model tables"
subtitle: "For negative binomial regression models"
author: "Szymon Talaga"
date: last-modified
date-format: "MMMM D, YYYY | HH:mm:ss (Z)"
toc: true
toc-depth: 3
toc-location: left
execute:
  echo: false
  warning: false
  cache: false
  daemon: false
format:
  html:
    grid:
      margin-width: 350px
    embed-resources: true
  pdf:
    toc: false
    number-sections: true
    colorlinks: true
reference-location: margin
citation-location: margin
---

```{r}
library(stringr)
library(dplyr)
library(purrr)
library(tibble)
library(reticulate)
library(broom)
library(broom.mixed)
library(glmmTMB)

use_condaenv("newsuse-study-algorithms")

project <- import("project")
config  <- project$config
paths   <- project$paths[["__copy__"]]()

alpha     <- config$inference$alpha
conf      <- config$inference$conf
adjust    <- config$inference$adjust

emm_options(
    emmeans  = list(type = "response", level = conf, adjust = adjust),
    contrast = list(adjust = adjust),
    summary  = list(infer = TRUE)
)
```

```{python}
import importlib
from typing import Mapping
import datetime
import numpy as np
import pandas as pd
from scipy import stats
import matplotlib as mpl
import matplotlib.dates
import matplotlib.transforms
import matplotlib.pyplot as plt
from matplotlib.patheffects import withStroke
import seaborn as sns
import seaborn.objects as so
from newsuse.data import DataFrame
from project import config, paths

mpl.style.use(config.plotting.style)
mpl.rcParams.update({
    k: v.make() if isinstance(v, Mapping) and "make!" in v else v
    for k, v in config.plotting.params.items()
})

# Get default color cycle here and extract colors
figpath = paths.figures / "glmm" / "changepoints"
figpath.mkdir(parents=True, exist_ok=True)
```

```{python}
QUALITY = ["low", "medium", "high"]
```


```{r}
glmm_r <- readRDS(as.character(paths$glmm / "reactions" / "main.rds"))
glmm_n <- readRDS(as.character(paths$glmm / "news" / "main.rds"))
glmm_b <- readRDS(as.character(paths$glmm / "both" / "quality.rds"))
```

```{r}
tidy.glmmTMB <- function(mod, component = c("cond", "disp", "zi"), ...) {
    is_disp <- "disp" %in% component
    if (is_disp) component <- component[-which(component == "disp")]
    df <- broom.mixed:::tidy.glmmTMB(mod, component = component, ...)
    if (is_disp) {
        S <- summary(mod)
        C <- coef(S)$disp
        if (!is.null(C)) {
            C <- cbind(term = rownames(C), as.data.frame(C)) %>%
                as_tibble %>%
                set_names(c(
                    "term", "estimate",
                    "std.error", "statistic", "p.value"
                )) %>%
                mutate(
                    effect = "fixed",
                    component = "disp",
                    group = NA_character_,
                    .before = 1L,
                )
        }
        V <- S$varcor$disp
        if (!is.null(V)) {
            V <- map(names(V), ~{
                nm <- .x
                v  <- V[[nm]]
                attr(v, "stddev") %>%
                    enframe %>%
                    mutate(group = nm, .before = 1L)
            }) %>%
            bind_rows %>%
            rename(term = name, estimate = value) %>%
            mutate(
                effect = "ran_pars",
                component = "disp",
                .before = 1L,
            ) %>%
            mutate(
                std.error = NA_real_,
                statistic = NA_real_,
                p.value = NA_real_,
            )
        }
        df <- bind_rows(df, C, V)
    }
    df
}
```

```{r}
Tr <- tidy(glmm_r)
Tn <- tidy(glmm_n)
Tb <- tidy(glmm_b)
```

```{python}
def sanitize_term(term, ref=list(QUALITY)[0]):
    def sanitize(t: str):
        if  t.startswith((prefix := "quality")):
            return t.removeprefix(prefix).lower()
        if t.startswith((prefix := "sector")):
            return t.removeprefix(prefix).lower()
        if t.startswith((prefix := "epoch")):
            return prefix+":"+t.removeprefix(prefix)
        if t == "(Intercept)":
            return f"(Intercept = {ref.lower()})"
        return t
    sep = "__"
    comp, term = term.split(sep) if sep in term else (None, term)
    term = ", ".join(
        r" $\times$ ".join(map(sanitize, t.split(":")))
        for t in term.split(".")
    )
    if comp == "sd":
        term = rf"$\sigma(\text{{{term}}})$"
    elif comp == "cor":
        term = rf"$\rho(\text{{{term}}})$"
    return term

def make_modeltable(df, topkey: str | None = None):
    df = (
        df
        .drop(columns=["statistic"])
        .set_index(["effect", "component", "group", "term"])
        .rename(columns={
            "estimate":  "b",
            "std.error": "se",
            "p.value":   "p",
        })
        .rename(lambda s: "fixed" if pd.isnull(s) else s, level="group")
        .rename({
            "country:name": "outlet",
            "country:sector:name": "outlet",
            "country:name:epoch": "outlet:epoch",
            "country:sector:name:epoch": "outlet:epoch",
        }, level="group")
        .rename(sanitize_term, level="term")
    )
    if topkey is not None:
        df = pd.concat({topkey: df}, axis=1)
    fixed = df.loc["fixed"]
    random = df.loc["ran_pars"].rename(
        lambda t: rf"$\sigma(\text{{{t}}})$" if not t.startswith("$") else t,
        level="term",
        axis=0,
    )
    df = pd.concat({"fixed": fixed, "ran_pars": random}, axis=0)
    return df

sanitize_term, make_modeltable
```

```{python}
def format_num(x, digits=3):
    return "" if np.isnan(x) else f"{x:.{digits}f}"

def format_pval(p, digits=3):
    if p < 10**-digits:
        return f"{p:.{digits}e}"
    return format_num(p, digits)

format_num, format_pval
```

```{python}
(
    make_modeltable(r.Tr, "Reactions")
    .droplevel(level=0)
    .unstack(level="component")
    .droplevel(level=0, axis=1)
    .swaplevel(0, 1, axis=1)
    [["cond", "disp"]]
    .rename_axis(index={"group": "effect"})
    .pipe(lambda df: df.style.format(
        escape=False,
        formatter={
            n: format_pval if n[1] == "p" else format_num
            for n in df.columns
        },
    ))
    .pipe(lambda df: print(df.to_latex(
        hrules=True,
        multicol_align="c",
        multirow_align="t",
        siunitx=False,
    )))
)
```

```{python}
(
    make_modeltable(r.Tn, "Reactions")
    .droplevel(level=0)
     .unstack(level="component")
    .droplevel(level=0, axis=1)
    .swaplevel(0, 1, axis=1)
    [["cond", "disp"]]
    .rename_axis(index={"group": "effect"})
    .pipe(lambda df: df.style.format(
        escape=False,
        formatter={
            n: format_pval if n[1] == "p" else format_num
            for n in df.columns
        },
    ))
    .pipe(lambda df: print(df.to_latex(
        hrules=True,
        multicol_align="c",
        multirow_align="t",
        siunitx=False,
    )))
)
```

```{python}
(
    make_modeltable(r.Tb, "Reactions")
    .droplevel(level=0)
     .unstack(level="component")
    .droplevel(level=0, axis=1)
    .swaplevel(0, 1, axis=1)
    [["cond", "disp"]]
    .rename_axis(index={"group": "effect"})
    .pipe(lambda df: df.style.format(
        escape=False,
        formatter={
            n: format_pval if n[1] == "p" else format_num
            for n in df.columns
        },
    ))
    .pipe(lambda df: print(df.to_latex(
        hrules=True,
        multicol_align="c",
        multirow_align="t",
        siunitx=False,
    )))
)
```
